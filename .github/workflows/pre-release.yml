name: Build and Publish Pre-release

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'

jobs:
  pre-release:
    name: Build and Publish Pre-release
    runs-on: macos-12
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install codesign certificate
        env:
          # DEV_CERT_B64: Base64-encoded developer certificate as .p12
          # DEV_CERT_PWD: Developer certificate .p12 password
          # PROVISION_PROFILE_B64: Base64-encoded provisioning profile as .provisionprofile
          # KEYCHAIN_TIMEOUT: Lock keychain after timeout interval
          # https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
          DEV_CERT_B64: ${{ secrets.DEV_CERT_B64 }}
          DEV_CERT_PWD: ${{ secrets.DEV_CERT_PWD }}
          MAC_CERT_B64: ${{ secrets.MAC_CERT_B64 }}
          MAC_CERT_PWD: ${{ secrets.MAC_CERT_PWD }}
          # PROVISION_PROFILE_B64: ${{ secrets.PROVISION_PROFILE_B64 }}
          KEYCHAIN_TIMEOUT: 21600
        run: |
          DEV_CERT_P12="$RUNNER_TEMP/dev_cert.p12"
          MAC_CERT_P12="$RUNNER_TEMP/mac_cert.p12"
          KEYCHAIN_DB="$RUNNER_TEMP/keychain.keychain-db"
          KEYCHAIN_PWD=$(openssl rand -base64 24)
          security create-keychain -p "$KEYCHAIN_PWD" "$KEYCHAIN_DB"
          security set-keychain-settings -lut "$KEYCHAIN_TIMEOUT" "$KEYCHAIN_DB"
          security unlock-keychain -p "$KEYCHAIN_PWD" "$KEYCHAIN_DB"
          echo -n "$DEV_CERT_B64" | base64 --decode --output "$DEV_CERT_P12"
          security import "$DEV_CERT_P12" -P "$DEV_CERT_PWD" -A -t cert -f pkcs12 -k "$KEYCHAIN_DB"
          echo -n "$MAC_CERT_B64" | base64 --decode --output "$MAC_CERT_P12"
          security import "$MAC_CERT_P12" -P "$MAC_CERT_PWD" -A -t cert -f pkcs12 -k "$KEYCHAIN_DB"
          security list-keychain -d user -s "$KEYCHAIN_DB"
      - name: Build CodeEdit
        env:
          APPLE_TEAM_ID:  ${{ secrets.APPLE_TEAM_ID }}
        run: xcodebuild -workspace CodeEdit.xcworkspace -scheme CodeEdit -configuration Release -derivedDataPath "$RUNNER_TEMP/DerivedData" -archivePath "$RUNNER_TEMP/CodeEdit.xcarchive" -skipPackagePluginValidation DEVELOPMENT_TEAM=$APPLE_TEAM_ID archive
      - name: Sign CodeEdit
        env:
          CODESIGN_SIGN: ${{ secrets.CODESIGN_SIGN }}
        run: |
          REV=$(git rev-parse --short HEAD)
          echo "REV=$REV" >> $GITHUB_ENV
          codesign --sign "$CODESIGN_SIGN" -vvv --verbose --strict --options=runtime --prefix austincondiff.CodeEdit. --force --deep --timestamp "$RUNNER_TEMP/CodeEdit.xcarchive/Products/Applications/CodeEdit.app"
      #- name: Create CodeEdit.dmg
        #run: |
          #REV=$(git rev-parse --short HEAD)
          #echo "REV=$REV" >> $GITHUB_ENV
          #mkdir "$RUNNER_TEMP/CodeEdit-$REV"
          #cp -r "$RUNNER_TEMP/CodeEdit.xcarchive/Products/Applications/CodeEdit.app" "$RUNNER_TEMP/CodeEdit-$REV"
          #hdiutil create -srcfolder "$RUNNER_TEMP/CodeEdit-$REV" -volname CodeEdit -format ULMO "$RUNNER_TEMP/CodeEdit-$REV.dmg"
      #- name: Zip CodeEdit
        #run: |
          #zip -r codeedit.zip codeedit-cli
      #- name: Notarize CodeEdit.dmg
        #env:
          # APPLE_ID: Developer Apple ID
          # APPLE_ID_PWD: App-specific password for Apple ID
          # APPLE_TEAM_ID: Developer Team ID
          #APPLE_ID: ${{ secrets.APPLE_ID }}
          #APPLE_ID_PWD: ${{ secrets.APPLE_ID_PWD }}
          #APPLE_TEAM_ID:  ${{ secrets.APPLE_TEAM_ID }}
        #run: |
          #xcrun notarytool submit --verbose --apple-id "$APPLE_ID" --password "$APPLE_ID_PWD" --team-id "$APPLE_TEAM_ID" --wait --timeout 2h "$RUNNER_TEMP/CodeEdit-$REV.dmg" --output-format plist > "NotarizationResponse.plist"
          #echo "**RESPONSE**"
          #cat NotarizationResponse.plist
          #id=`/usr/libexec/PlistBuddy -c "Print :id" "NotarizationResponse.plist"`
          #xcrun notarytool log --verbose --apple-id "$APPLE_ID" --password "$APPLE_ID_PWD" --team-id "$APPLE_TEAM_ID" "$id"
          #xcrun stapler staple "$RUNNER_TEMP/CodeEdit-$REV.dmg"
      - name: Using brew
        env:
          CODESIGN_SIGN: ${{ secrets.CODESIGN_SIGN }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PWD: ${{ secrets.APPLE_ID_PWD }}
          APPLE_TEAM_ID:  ${{ secrets.APPLE_TEAM_ID }}
        run: |
          REV=$(git rev-parse --short HEAD)
          echo "REV=$REV" >> $GITHUB_ENV
          xcrun notarytool store-credentials CodeEdit --apple-id "$APPLE_ID" --team-id "$APPLE_TEAM_ID" --password "$APPLE_ID_PWD"
          brew install create-dmg
          create-dmg \
            --volname "CodeEdit" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "CodeEdit.app" 200 190 \
            --hide-extension "CodeEdit.app" \
            --app-drop-link 600 185 \
            --codesign "$CODESIGN_SIGN" \
            --notarize "CodeEdit" \
            "$RUNNER_TEMP/CodeEdit-$REV.dmg" \
            "$RUNNER_TEMP/CodeEdit.xcarchive/Products/Applications/"
      - name: Publish Pre-release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          title: "CodeEdit-${{ env.REV }}"
          files: |
            "$RUNNER_TEMP/CodeEdit-$REV.dmg"
            #"${{ RUNNER.TEMP }}/Sparkle_Archive/CodeEdit-${{ env.REV }}.dmg"
            #"${{ RUNNER.TEMP }}/Sparkle_Archive/appcast.xml"
          automatic_release_tag: "latest"
          prerelease: true
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain "$RUNNER_TEMP/keychain.keychain-db"
          rm -rf "~/Library/MobileDevice/Provisioning Profiles"
